%{
open Litsu.Lang.SyntaxTree

// fsharplint:disable
%}

%start program

%token EOF
%token <int64> INT

%token PLUS MINUS
%token EQ

// order by operator precedence
%left EQ
%left PLUS MINUS

%type <SyntaxTree.Program> program

%%

program: nodes { { Nodes = $1 } }

nodes:
  | { [] }
  | rev_nodes { List.rev $1 }

rev_nodes:
  | node { [$1] }
  | rev_nodes node { $2 :: $1 }

node:
  | expr { Node.Expr $1 }

expr:
  | expr PLUS  expr { Expr.Add($1, $3) }
  | expr MINUS expr { Expr.Sub($1, $3) }
  | expr EQ    expr { Expr.Eq($1, $3) }
  | INT { Expr.Int $1 }
