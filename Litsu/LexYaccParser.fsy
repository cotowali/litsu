%{
open Litsu.SyntaxTree
open Litsu.Type
open FSharp.Text.Parsing

// fsharplint:disable

let parse_error_rich = Some(fun (ctx: ParseErrorContext<_>) -> failwith "xxx")
%}

%start program

%token EOF
%token <int64>  INT
%token <string> STRING
%token <string> IDENT
%token LET IN
%token IF THEN ELSE
%token SEMICOLON

%token LPAREN RPAREN
%token PLUS MINUS MUL DIV
%token EQ LESS_GREATER LESS LESS_EQ GREATER GREATER_EQ

// order by operator precedence
%nonassoc IN
%right prec_let
%right prec_if
%left EQ LESS_GREATER LESS LESS_EQ GREATER GREATER_EQ
%left PLUS MINUS
%left MUL DIV
%left prec_app

%type <SyntaxTree.Program> program

%%

program: nodes { { Nodes = $1 } }

nodes:
  | { [] }
  | rev_nodes { List.rev $1 }

rev_nodes:
  | node { [$1] }
  | rev_nodes node { $2 :: $1 }

node:
  | expr           { Node.Expr $1 }
  | expr SEMICOLON { Node.Expr $1 }

simple_expr:
  | LPAREN expr RPAREN { $2 }
  | IDENT         { Expr.Var({ Name = $1; Type = newType(); }) }
  | LPAREN RPAREN { Expr.Unit }
  | INT           { Expr.Int($1) }
  | STRING        { Expr.String($1) }

expr:
  | simple_expr { $1 }
  | expr PLUS expr
    { Expr.Infix({ Op = "+"; Left = $1; Right = $3; Type = newType(); }) }
  | expr MINUS expr
    { Expr.Infix({ Op = "-"; Left = $1; Right = $3; Type = newType(); }) }
  | expr MUL expr
    { Expr.Infix({ Op = "*"; Left = $1; Right = $3; Type = newType(); }) }
  | expr DIV expr
    { Expr.Infix({ Op = "/"; Left = $1; Right = $3; Type = newType(); }) }
  | expr EQ expr
    { Expr.Infix({ Op = "="; Left = $1; Right = $3; Type = newType(); }) }
  | expr LESS_GREATER expr
    { Expr.Infix({ Op = "<>"; Left = $1; Right = $3; Type = newType(); }) }
  | expr LESS expr
    { Expr.Infix({ Op = "<"; Left = $1; Right = $3; Type = newType(); }) }
  | expr LESS_EQ expr
    { Expr.Infix({ Op = "<="; Left = $1; Right = $3; Type = newType(); }) }
  | expr GREATER expr
    { Expr.Infix({ Op = ">"; Left = $1; Right = $3; Type = newType(); }) }
  | expr GREATER_EQ expr
    { Expr.Infix({ Op = ">="; Left = $1; Right = $3; Type = newType(); }) }
  | simple_expr actual_args
    %prec prec_app
    { Expr.App({ Fun = $1; Args = $2; Type = newType(); }) }
  | LET IDENT EQ expr IN expr
    %prec prec_let
    { Expr.Let({ Name = $2; Type = newType(); Args = []; Expr1 = $4; Expr2 = $6; }) }
  | LET IDENT formal_args EQ expr IN expr
    %prec prec_let
    { Expr.Let({ Name = $2; Type = newType(); Args = $3; Expr1 = $5; Expr2 = $7; }) }
  | IF expr THEN expr ELSE expr
    %prec prec_if
    { Expr.If({ Cond = $2; Expr1 = $4; Expr2 = $6; Type = newType(); }) }


formal_args:
  | IDENT formal_args
    { { Name = $1; Type = newType(); } :: $2 }
  | LPAREN RPAREN formal_args
    { { Name = ""; Type = Type.Unit; } :: $3 }
  | IDENT         { [{ Name = $1; Type = newType(); }] }
  | LPAREN RPAREN { [{ Name = ""; Type = Type.Unit; }] }

actual_args:
  | rev_actual_args
    { List.rev $1 }

rev_actual_args:
  | rev_actual_args simple_expr
    { $2 :: $1 }
  | simple_expr
    { [$1] }
