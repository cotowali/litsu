%{
open Litsu.SyntaxTree
open Litsu.Type
open FSharp.Text.Parsing

// fsharplint:disable

let parse_error_rich = Some(fun (ctx: ParseErrorContext<_>) -> failwith "xxx")
%}

%start program

%token EOF
%token <int64>  INT
%token <string> IDENT
%token LET IN

%token PLUS MINUS
%token EQ

// order by operator precedence
%nonassoc IN
%right prec_let
%left EQ
%left PLUS MINUS

%type <SyntaxTree.Program> program

%%

program: nodes { { Nodes = $1 } }

nodes:
  | { [] }
  | rev_nodes { List.rev $1 }

rev_nodes:
  | node { [$1] }
  | rev_nodes node { $2 :: $1 }

node:
  | expr { Node.Expr $1 }

expr:
  | expr PLUS  expr { Expr.Infix("+", $1, $3, newType()) }
  | expr MINUS expr { Expr.Infix("-", $1, $3, newType()) }
  | expr EQ    expr { Expr.Infix("=", $1, $3, newType()) }
  | LET IDENT EQ expr IN expr
    %prec prec_rec
    { Expr.Let($2, newType(), $4, $6) }
  | IDENT { Expr.Var($1, newType()) }
  | INT   { Expr.Int($1) }
