{
open FSharp.Text.Lexing
open Litsu.LexYaccParser

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

// fsharplint:disable
}

let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')
let lComment = "//" [^ '\n' '\r']*

let digit = ['0'-'9']

let int = digit+


let identStart = ['A'-'Z' 'a'-'z' '_']
let ident = identStart (identStart | digit)*

rule read = parse
| whitespace { read lexbuf }
| lComment   { read lexbuf }
| "(*"       { comment lexbuf; read lexbuf }
| newline    { newline lexbuf; read lexbuf }
| "let"      { LET }
| "in"       { IN }
| "if"       { IF }
| "then"     { THEN }
| "else"     { ELSE }
| int        { INT(lexeme lexbuf |> int64) }
| '+'        { PLUS }
| '-'        { MINUS }
| '='        { EQ }
| '('        { LPAREN }
| ')'        { RPAREN }
| '"'        { read_string "" lexbuf }
| ident      { IDENT(lexeme lexbuf) }
| eof        { EOF }
| _          { failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }

and read_string buf = parse
| "\\\"" { read_string (buf + "\"") lexbuf }
| "\\\\" { read_string (buf + "\\") lexbuf }
| '"' { STRING(buf) }
| eof { failwith ("ParseError: string literal is not terminated") }
| _ { read_string (buf + (lexeme lexbuf)) lexbuf }

and comment = parse
| "*)" { () }
| "(*" { comment lexbuf; comment lexbuf }
| eof  { failwith ("ParseError: comment is not terminated") }
| _    { comment lexbuf }
